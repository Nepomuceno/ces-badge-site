/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VoteRouteImport } from './routes/vote'
import { Route as ScoresRouteImport } from './routes/scores'
import { Route as MyLogosRouteImport } from './routes/my-logos'
import { Route as GuidelinesRouteImport } from './routes/guidelines'
import { Route as GalleryRouteImport } from './routes/gallery'
import { Route as FavoritesRouteImport } from './routes/favorites'
import { Route as ContestsRouteImport } from './routes/contests'
import { Route as AccountRouteImport } from './routes/account'
import { Route as AccessDeniedRouteImport } from './routes/access-denied'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LogosLogoIdRouteImport } from './routes/logos.$logoId'
import { Route as GalleryLogoIdRouteImport } from './routes/gallery.$logoId'
import { Route as Contest_resultsContestIdRouteImport } from './routes/contest_results.$contestId'
import { Route as ApiVotesRouteImport } from './routes/api.votes'
import { Route as ApiLogosRouteImport } from './routes/api.logos'
import { Route as ApiContestsRouteImport } from './routes/api.contests'
import { Route as ApiAllowedUsersRouteImport } from './routes/api.allowed-users'
import { Route as AdminContestsRouteImport } from './routes/admin.contests'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'
import { Route as ApiLogosLogoIdRouteImport } from './routes/api.logos.$logoId'
import { Route as ApiContestsContestIdRouteImport } from './routes/api.contests.$contestId'
import { Route as ApiLogosLogoIdImageRouteImport } from './routes/api.logos.$logoId.image'
import { Route as ApiContestsContestIdResetRouteImport } from './routes/api.contests.$contestId.reset'
import { Route as ApiContestsContestIdRecalculateEloRouteImport } from './routes/api.contests.$contestId.recalculate-elo'

const VoteRoute = VoteRouteImport.update({
  id: '/vote',
  path: '/vote',
  getParentRoute: () => rootRouteImport,
} as any)
const ScoresRoute = ScoresRouteImport.update({
  id: '/scores',
  path: '/scores',
  getParentRoute: () => rootRouteImport,
} as any)
const MyLogosRoute = MyLogosRouteImport.update({
  id: '/my-logos',
  path: '/my-logos',
  getParentRoute: () => rootRouteImport,
} as any)
const GuidelinesRoute = GuidelinesRouteImport.update({
  id: '/guidelines',
  path: '/guidelines',
  getParentRoute: () => rootRouteImport,
} as any)
const GalleryRoute = GalleryRouteImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => rootRouteImport,
} as any)
const FavoritesRoute = FavoritesRouteImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => rootRouteImport,
} as any)
const ContestsRoute = ContestsRouteImport.update({
  id: '/contests',
  path: '/contests',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const AccessDeniedRoute = AccessDeniedRouteImport.update({
  id: '/access-denied',
  path: '/access-denied',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LogosLogoIdRoute = LogosLogoIdRouteImport.update({
  id: '/logos/$logoId',
  path: '/logos/$logoId',
  getParentRoute: () => rootRouteImport,
} as any)
const GalleryLogoIdRoute = GalleryLogoIdRouteImport.update({
  id: '/$logoId',
  path: '/$logoId',
  getParentRoute: () => GalleryRoute,
} as any)
const Contest_resultsContestIdRoute =
  Contest_resultsContestIdRouteImport.update({
    id: '/contest_results/$contestId',
    path: '/contest_results/$contestId',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiVotesRoute = ApiVotesRouteImport.update({
  id: '/api/votes',
  path: '/api/votes',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiLogosRoute = ApiLogosRouteImport.update({
  id: '/api/logos',
  path: '/api/logos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiContestsRoute = ApiContestsRouteImport.update({
  id: '/api/contests',
  path: '/api/contests',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAllowedUsersRoute = ApiAllowedUsersRouteImport.update({
  id: '/api/allowed-users',
  path: '/api/allowed-users',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminContestsRoute = AdminContestsRouteImport.update({
  id: '/admin/contests',
  path: '/admin/contests',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiLogosLogoIdRoute = ApiLogosLogoIdRouteImport.update({
  id: '/$logoId',
  path: '/$logoId',
  getParentRoute: () => ApiLogosRoute,
} as any)
const ApiContestsContestIdRoute = ApiContestsContestIdRouteImport.update({
  id: '/$contestId',
  path: '/$contestId',
  getParentRoute: () => ApiContestsRoute,
} as any)
const ApiLogosLogoIdImageRoute = ApiLogosLogoIdImageRouteImport.update({
  id: '/image',
  path: '/image',
  getParentRoute: () => ApiLogosLogoIdRoute,
} as any)
const ApiContestsContestIdResetRoute =
  ApiContestsContestIdResetRouteImport.update({
    id: '/reset',
    path: '/reset',
    getParentRoute: () => ApiContestsContestIdRoute,
  } as any)
const ApiContestsContestIdRecalculateEloRoute =
  ApiContestsContestIdRecalculateEloRouteImport.update({
    id: '/recalculate-elo',
    path: '/recalculate-elo',
    getParentRoute: () => ApiContestsContestIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/access-denied': typeof AccessDeniedRoute
  '/account': typeof AccountRoute
  '/contests': typeof ContestsRoute
  '/favorites': typeof FavoritesRoute
  '/gallery': typeof GalleryRouteWithChildren
  '/guidelines': typeof GuidelinesRoute
  '/my-logos': typeof MyLogosRoute
  '/scores': typeof ScoresRoute
  '/vote': typeof VoteRoute
  '/admin/contests': typeof AdminContestsRoute
  '/api/allowed-users': typeof ApiAllowedUsersRoute
  '/api/contests': typeof ApiContestsRouteWithChildren
  '/api/logos': typeof ApiLogosRouteWithChildren
  '/api/votes': typeof ApiVotesRoute
  '/contest_results/$contestId': typeof Contest_resultsContestIdRoute
  '/gallery/$logoId': typeof GalleryLogoIdRoute
  '/logos/$logoId': typeof LogosLogoIdRoute
  '/api/contests/$contestId': typeof ApiContestsContestIdRouteWithChildren
  '/api/logos/$logoId': typeof ApiLogosLogoIdRouteWithChildren
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/api/contests/$contestId/recalculate-elo': typeof ApiContestsContestIdRecalculateEloRoute
  '/api/contests/$contestId/reset': typeof ApiContestsContestIdResetRoute
  '/api/logos/$logoId/image': typeof ApiLogosLogoIdImageRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/access-denied': typeof AccessDeniedRoute
  '/account': typeof AccountRoute
  '/contests': typeof ContestsRoute
  '/favorites': typeof FavoritesRoute
  '/gallery': typeof GalleryRouteWithChildren
  '/guidelines': typeof GuidelinesRoute
  '/my-logos': typeof MyLogosRoute
  '/scores': typeof ScoresRoute
  '/vote': typeof VoteRoute
  '/admin/contests': typeof AdminContestsRoute
  '/api/allowed-users': typeof ApiAllowedUsersRoute
  '/api/contests': typeof ApiContestsRouteWithChildren
  '/api/logos': typeof ApiLogosRouteWithChildren
  '/api/votes': typeof ApiVotesRoute
  '/contest_results/$contestId': typeof Contest_resultsContestIdRoute
  '/gallery/$logoId': typeof GalleryLogoIdRoute
  '/logos/$logoId': typeof LogosLogoIdRoute
  '/api/contests/$contestId': typeof ApiContestsContestIdRouteWithChildren
  '/api/logos/$logoId': typeof ApiLogosLogoIdRouteWithChildren
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/api/contests/$contestId/recalculate-elo': typeof ApiContestsContestIdRecalculateEloRoute
  '/api/contests/$contestId/reset': typeof ApiContestsContestIdResetRoute
  '/api/logos/$logoId/image': typeof ApiLogosLogoIdImageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/access-denied': typeof AccessDeniedRoute
  '/account': typeof AccountRoute
  '/contests': typeof ContestsRoute
  '/favorites': typeof FavoritesRoute
  '/gallery': typeof GalleryRouteWithChildren
  '/guidelines': typeof GuidelinesRoute
  '/my-logos': typeof MyLogosRoute
  '/scores': typeof ScoresRoute
  '/vote': typeof VoteRoute
  '/admin/contests': typeof AdminContestsRoute
  '/api/allowed-users': typeof ApiAllowedUsersRoute
  '/api/contests': typeof ApiContestsRouteWithChildren
  '/api/logos': typeof ApiLogosRouteWithChildren
  '/api/votes': typeof ApiVotesRoute
  '/contest_results/$contestId': typeof Contest_resultsContestIdRoute
  '/gallery/$logoId': typeof GalleryLogoIdRoute
  '/logos/$logoId': typeof LogosLogoIdRoute
  '/api/contests/$contestId': typeof ApiContestsContestIdRouteWithChildren
  '/api/logos/$logoId': typeof ApiLogosLogoIdRouteWithChildren
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/api/contests/$contestId/recalculate-elo': typeof ApiContestsContestIdRecalculateEloRoute
  '/api/contests/$contestId/reset': typeof ApiContestsContestIdResetRoute
  '/api/logos/$logoId/image': typeof ApiLogosLogoIdImageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/access-denied'
    | '/account'
    | '/contests'
    | '/favorites'
    | '/gallery'
    | '/guidelines'
    | '/my-logos'
    | '/scores'
    | '/vote'
    | '/admin/contests'
    | '/api/allowed-users'
    | '/api/contests'
    | '/api/logos'
    | '/api/votes'
    | '/contest_results/$contestId'
    | '/gallery/$logoId'
    | '/logos/$logoId'
    | '/api/contests/$contestId'
    | '/api/logos/$logoId'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/api/contests/$contestId/recalculate-elo'
    | '/api/contests/$contestId/reset'
    | '/api/logos/$logoId/image'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/access-denied'
    | '/account'
    | '/contests'
    | '/favorites'
    | '/gallery'
    | '/guidelines'
    | '/my-logos'
    | '/scores'
    | '/vote'
    | '/admin/contests'
    | '/api/allowed-users'
    | '/api/contests'
    | '/api/logos'
    | '/api/votes'
    | '/contest_results/$contestId'
    | '/gallery/$logoId'
    | '/logos/$logoId'
    | '/api/contests/$contestId'
    | '/api/logos/$logoId'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/api/contests/$contestId/recalculate-elo'
    | '/api/contests/$contestId/reset'
    | '/api/logos/$logoId/image'
  id:
    | '__root__'
    | '/'
    | '/access-denied'
    | '/account'
    | '/contests'
    | '/favorites'
    | '/gallery'
    | '/guidelines'
    | '/my-logos'
    | '/scores'
    | '/vote'
    | '/admin/contests'
    | '/api/allowed-users'
    | '/api/contests'
    | '/api/logos'
    | '/api/votes'
    | '/contest_results/$contestId'
    | '/gallery/$logoId'
    | '/logos/$logoId'
    | '/api/contests/$contestId'
    | '/api/logos/$logoId'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/api/contests/$contestId/recalculate-elo'
    | '/api/contests/$contestId/reset'
    | '/api/logos/$logoId/image'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccessDeniedRoute: typeof AccessDeniedRoute
  AccountRoute: typeof AccountRoute
  ContestsRoute: typeof ContestsRoute
  FavoritesRoute: typeof FavoritesRoute
  GalleryRoute: typeof GalleryRouteWithChildren
  GuidelinesRoute: typeof GuidelinesRoute
  MyLogosRoute: typeof MyLogosRoute
  ScoresRoute: typeof ScoresRoute
  VoteRoute: typeof VoteRoute
  AdminContestsRoute: typeof AdminContestsRoute
  ApiAllowedUsersRoute: typeof ApiAllowedUsersRoute
  ApiContestsRoute: typeof ApiContestsRouteWithChildren
  ApiLogosRoute: typeof ApiLogosRouteWithChildren
  ApiVotesRoute: typeof ApiVotesRoute
  Contest_resultsContestIdRoute: typeof Contest_resultsContestIdRoute
  LogosLogoIdRoute: typeof LogosLogoIdRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vote': {
      id: '/vote'
      path: '/vote'
      fullPath: '/vote'
      preLoaderRoute: typeof VoteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/scores': {
      id: '/scores'
      path: '/scores'
      fullPath: '/scores'
      preLoaderRoute: typeof ScoresRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-logos': {
      id: '/my-logos'
      path: '/my-logos'
      fullPath: '/my-logos'
      preLoaderRoute: typeof MyLogosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guidelines': {
      id: '/guidelines'
      path: '/guidelines'
      fullPath: '/guidelines'
      preLoaderRoute: typeof GuidelinesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gallery': {
      id: '/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favorites': {
      id: '/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contests': {
      id: '/contests'
      path: '/contests'
      fullPath: '/contests'
      preLoaderRoute: typeof ContestsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/access-denied': {
      id: '/access-denied'
      path: '/access-denied'
      fullPath: '/access-denied'
      preLoaderRoute: typeof AccessDeniedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logos/$logoId': {
      id: '/logos/$logoId'
      path: '/logos/$logoId'
      fullPath: '/logos/$logoId'
      preLoaderRoute: typeof LogosLogoIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gallery/$logoId': {
      id: '/gallery/$logoId'
      path: '/$logoId'
      fullPath: '/gallery/$logoId'
      preLoaderRoute: typeof GalleryLogoIdRouteImport
      parentRoute: typeof GalleryRoute
    }
    '/contest_results/$contestId': {
      id: '/contest_results/$contestId'
      path: '/contest_results/$contestId'
      fullPath: '/contest_results/$contestId'
      preLoaderRoute: typeof Contest_resultsContestIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/votes': {
      id: '/api/votes'
      path: '/api/votes'
      fullPath: '/api/votes'
      preLoaderRoute: typeof ApiVotesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/logos': {
      id: '/api/logos'
      path: '/api/logos'
      fullPath: '/api/logos'
      preLoaderRoute: typeof ApiLogosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/contests': {
      id: '/api/contests'
      path: '/api/contests'
      fullPath: '/api/contests'
      preLoaderRoute: typeof ApiContestsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/allowed-users': {
      id: '/api/allowed-users'
      path: '/api/allowed-users'
      fullPath: '/api/allowed-users'
      preLoaderRoute: typeof ApiAllowedUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/contests': {
      id: '/admin/contests'
      path: '/admin/contests'
      fullPath: '/admin/contests'
      preLoaderRoute: typeof AdminContestsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/logos/$logoId': {
      id: '/api/logos/$logoId'
      path: '/$logoId'
      fullPath: '/api/logos/$logoId'
      preLoaderRoute: typeof ApiLogosLogoIdRouteImport
      parentRoute: typeof ApiLogosRoute
    }
    '/api/contests/$contestId': {
      id: '/api/contests/$contestId'
      path: '/$contestId'
      fullPath: '/api/contests/$contestId'
      preLoaderRoute: typeof ApiContestsContestIdRouteImport
      parentRoute: typeof ApiContestsRoute
    }
    '/api/logos/$logoId/image': {
      id: '/api/logos/$logoId/image'
      path: '/image'
      fullPath: '/api/logos/$logoId/image'
      preLoaderRoute: typeof ApiLogosLogoIdImageRouteImport
      parentRoute: typeof ApiLogosLogoIdRoute
    }
    '/api/contests/$contestId/reset': {
      id: '/api/contests/$contestId/reset'
      path: '/reset'
      fullPath: '/api/contests/$contestId/reset'
      preLoaderRoute: typeof ApiContestsContestIdResetRouteImport
      parentRoute: typeof ApiContestsContestIdRoute
    }
    '/api/contests/$contestId/recalculate-elo': {
      id: '/api/contests/$contestId/recalculate-elo'
      path: '/recalculate-elo'
      fullPath: '/api/contests/$contestId/recalculate-elo'
      preLoaderRoute: typeof ApiContestsContestIdRecalculateEloRouteImport
      parentRoute: typeof ApiContestsContestIdRoute
    }
  }
}

interface GalleryRouteChildren {
  GalleryLogoIdRoute: typeof GalleryLogoIdRoute
}

const GalleryRouteChildren: GalleryRouteChildren = {
  GalleryLogoIdRoute: GalleryLogoIdRoute,
}

const GalleryRouteWithChildren =
  GalleryRoute._addFileChildren(GalleryRouteChildren)

interface ApiContestsContestIdRouteChildren {
  ApiContestsContestIdRecalculateEloRoute: typeof ApiContestsContestIdRecalculateEloRoute
  ApiContestsContestIdResetRoute: typeof ApiContestsContestIdResetRoute
}

const ApiContestsContestIdRouteChildren: ApiContestsContestIdRouteChildren = {
  ApiContestsContestIdRecalculateEloRoute:
    ApiContestsContestIdRecalculateEloRoute,
  ApiContestsContestIdResetRoute: ApiContestsContestIdResetRoute,
}

const ApiContestsContestIdRouteWithChildren =
  ApiContestsContestIdRoute._addFileChildren(ApiContestsContestIdRouteChildren)

interface ApiContestsRouteChildren {
  ApiContestsContestIdRoute: typeof ApiContestsContestIdRouteWithChildren
}

const ApiContestsRouteChildren: ApiContestsRouteChildren = {
  ApiContestsContestIdRoute: ApiContestsContestIdRouteWithChildren,
}

const ApiContestsRouteWithChildren = ApiContestsRoute._addFileChildren(
  ApiContestsRouteChildren,
)

interface ApiLogosLogoIdRouteChildren {
  ApiLogosLogoIdImageRoute: typeof ApiLogosLogoIdImageRoute
}

const ApiLogosLogoIdRouteChildren: ApiLogosLogoIdRouteChildren = {
  ApiLogosLogoIdImageRoute: ApiLogosLogoIdImageRoute,
}

const ApiLogosLogoIdRouteWithChildren = ApiLogosLogoIdRoute._addFileChildren(
  ApiLogosLogoIdRouteChildren,
)

interface ApiLogosRouteChildren {
  ApiLogosLogoIdRoute: typeof ApiLogosLogoIdRouteWithChildren
}

const ApiLogosRouteChildren: ApiLogosRouteChildren = {
  ApiLogosLogoIdRoute: ApiLogosLogoIdRouteWithChildren,
}

const ApiLogosRouteWithChildren = ApiLogosRoute._addFileChildren(
  ApiLogosRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccessDeniedRoute: AccessDeniedRoute,
  AccountRoute: AccountRoute,
  ContestsRoute: ContestsRoute,
  FavoritesRoute: FavoritesRoute,
  GalleryRoute: GalleryRouteWithChildren,
  GuidelinesRoute: GuidelinesRoute,
  MyLogosRoute: MyLogosRoute,
  ScoresRoute: ScoresRoute,
  VoteRoute: VoteRoute,
  AdminContestsRoute: AdminContestsRoute,
  ApiAllowedUsersRoute: ApiAllowedUsersRoute,
  ApiContestsRoute: ApiContestsRouteWithChildren,
  ApiLogosRoute: ApiLogosRouteWithChildren,
  ApiVotesRoute: ApiVotesRoute,
  Contest_resultsContestIdRoute: Contest_resultsContestIdRoute,
  LogosLogoIdRoute: LogosLogoIdRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
